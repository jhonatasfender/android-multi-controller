# Multi-Device Android Controller - Regras do Projeto

## Arquitetura SOLID
- **S**ingle Responsibility: Cada classe deve ter uma única responsabilidade
- **O**pen/Closed: Aberto para extensão, fechado para modificação
- **L**iskov Substitution: Interfaces devem ser substituíveis por implementações
- **I**nterface Segregation: Interfaces específicas ao invés de interfaces grandes
- **D**ependency Inversion: Depender de abstrações, não de implementações

## Estrutura de Camadas
1. **Presentation Layer**: Qt/QML UI components
2. **Use Case Layer**: Business logic e casos de uso
3. **Infrastructure Layer**: ADB communication, persistence, external services
4. **Core Layer**: Domain entities e business rules

## Padrões de Código
- Usar Qt 6 moderno com QML para UI responsiva
- Implementar dependency injection
- Usar smart pointers (std::unique_ptr, std::shared_ptr)
- Preferir const correctness
- Usar RAII para resource management
- Implementar logging com spdlog
- Escrever testes unitários para cada camada

## Nomenclatura
- Classes: PascalCase (ex: DeviceController)
- Métodos: camelCase (ex: connectDevice)
- Variáveis: camelCase (ex: deviceList)
- Constantes: UPPER_SNAKE_CASE (ex: MAX_DEVICES)
- Arquivos: snake_case (ex: device_controller.h)

## Organização de Arquivos
- Headers (.h) e implementações (.cpp) separados
- Um arquivo por classe
- Namespaces organizados por camada
- Incluir guards em todos os headers

## UI/UX Guidelines
- Interface moderna e responsiva
- Suporte a temas claro/escuro
- Layout adaptativo para diferentes tamanhos de tela
- Feedback visual para ações do usuário
- Acessibilidade e internacionalização 